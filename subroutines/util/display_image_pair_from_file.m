function display_image_pair_from_file(...
    filename, ini_idx, fin_idx, which_view, which_image, which_mask, which_x, which_y)
% function display_image_pair_from_file(...
%   filename, ini_idx, fin_idx, which_view, which_image, which_mask, which_x, which_y)
%
% Simple plot of image pair with area outside ROI set to 0
%
% Arguments:
%   filename: data file name, as generated by prep()
%   ini_idx, fin_idx: index of first, last images in pair
%   which_view: Optional string, select which kind of display, options are
%       'subplot' and 'toggle' 
%   which_image: Optional string, select the image type in the file to display by specifying the
%       image variable name (e.g., 'img', 'img_eql')
%   which_mask: Optional string, select the mask to use in the file by specifying the mask
%       variable name (e.g., 'mask'), or set to '' to display unmasked image (the default)
%   which_x, which_y: Optional string, select the x, y coordinate in the file to use by specifying
%       the variable name (e.g., 'x', 'xPad')
% %

% set defaults
if nargin < 4; which_view = 'subplot'; end
if nargin < 5; which_image = 'img'; end
if nargin < 6; which_mask = ''; end
if nargin < 7; which_x = 'x'; end
if nargin < 8; which_y = 'y'; end

% extract requested data from file
data = matfile(filename, 'Writable', false);

if ndims(data.(which_image)) == 3  % grayscale image
    ini = data.(which_image)(:, :, ini_idx);
    fin = data.(which_image)(:, :, fin_idx);
elseif ndims(data.(which_image)) == 4  % RGB image
    ini = data.(which_image)(:, :, :, ini_idx);
    fin = data.(which_image)(:, :, :, fin_idx);
else
    error('image variable has unexpected dimensionality: %d', ndims(data.(which_image)));
end

if which_mask 
    ini_mask = data.(which_mask)(:, :, ini_idx);
    fin_mask = data.(which_mask)(:, :, fin_idx);
else
    ini_mask = true(size(ini, 1:2));
    fin_mask = true(size(fin, 1:2));
end

x = data.(which_x);
y = data.(which_y);

% sanity check
assert(all(size(ini) == size(fin)), 'ini and fin image sizes do not match');
assert(all(size(ini_mask) == size(ini, 1:2)), 'ini mask and image size do not match');
assert(all(size(fin_mask) == size(fin, 1:2)), 'fin mask and image size do not match');
assert(length(x) == size(ini, 2), 'x coordinate does not match images');
assert(length(y) == size(ini, 1), 'y coordinate does not match images');

% display!
display_image_pair(x, y, ini, ini_mask, fin, fin_mask, which_view);